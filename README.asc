= Alastria T Network NG: Governance and Operational Policies
:author: Jesus Ruiz
:email: hesus.ruiz@gmail.com
:revnumber: 0.2
:revdate: 20-11-2020
:numbered:
:imagesdir: assets
:icons: font
:tip-caption: :bulb:
:note-caption: :information_source:
:important-caption: :heavy_exclamation_mark:
:caution-caption: :fire:
:warning-caption: :warning:
:bibtex-file: bibliography.bib
:bibtex-order: alphabetical
:bibtex-style: ieee

(Version: {revnumber}, Version Date: {revdate})

The Alastria T Network is a blockchain network operated by some members of the Alastria association. The operation of the network is independent from the association, in the sense that the association (as a legal entity) has no control or decission power over the network. However, the entities operating the network assume voluntarily the compromise to comply with the principles of the association.

The T Network is a Public-Permissioned network, which combines *permissioning* with a **decentralized governance model**, allowing the blockchain to be managed as a **Common Good**. Very briefly, this means that the network is not controlled by any single company or group of companies, or even by a single government, and at the same time the network complies with all relevant regulations and it is efficient and sustainable.

== Introduction to Public-Permissioned blockchain networks

A Public-Permissioned blockchain network combines permissioning with a decentralized governance model, allowing the blockchain to be managed as a Common Good. Very briefly, this means that the network is not controlled by any single company or group of companies, or even by a single government, and at the same time the network complies with all relevant regulations and it is efficient and sustainable.

There is not a single way to achieve these objectives, but the T Network implements a specific governance model which arises from considering the blockchain network as a Common-Pool Resource (CPR) like the ones described by Elinor Ostrom, Nobel Prize in Economics in 2009. Ostrom focused on how communities manage to successfully govern communal resources, avoiding the “The tragedy of the commons” as described by Hardin.

A blockchain network can be considered as a technical infrastructure with scarce resources, given the inherent scaling problems of the technology. To be considered a common good, a Public-Permissioned blockchain network should comply with the following principles:

1. **Non-discriminatory and open access and usage**: Everybody has the right to join and use the infrastructure according to the access rules, which are fair, transparent and the same for everybody. In an analogy with the public roads of a country, everybody can drive a car, as far as they hold a valid driver’s license, and the car displays its plate.

2. **Open participation in governance**: Everybody has the right to participate in the construction, operation, provision, and governance of the infrastructure. The network should be inclusive, open to participation of any entity independent of size or sector of activity. Specifically, anybody can participate in the execution of the consensus algorithm used for the selection of transactions which go into the blocks.

3. **Inclusive participation in governance**: Influence in governance of the infrastructure should be independent of the size, wealth, sector of activity or any other factor. Specifically, voting power in the consensus algorithm should be independent of computing power available (PoW), assets available (PoS), or any other where the rich or powerful dominates over others. We could say that the consensus algorithm should be “as democratic as possible”, where one entity represents one vote.

4. **Juridical persons are never anonymous**: As in the real economy, the identities of juridical persons in the blockchain are public and well-known. In addition, even though their transactional activity may be private with respect to other actors (e.g. competitors), it is never private with respect to regulators or other controlling and law enforcement bodies (e.g. tax agencies or industry watchdogs).

5. **Consumer protection is ensured**: Normally natural persons do not participate directly in the blockchain because they do not run or operate a full node. Instead, they typically participate indirectly and so they must somehow trust some other actors. In any case, independently of whether participation of a natural person is direct or indirect, the system must always ensure that all applicable regulations on consumer protection apply, including personal data protection regulations.

== The architecture of the T Network

The T Network uses an EEA (Enterprise Ethereum Alliance) client called Consensys Quorum. As the interoperability specifications in the EEA matures, it is anticipated that other implementations of the EEA specs will be used simultaneously in the network, in the short term Hyperledger Besu and later other implementations.

The description of the architecture is highly independent of the specific type of client used, so we will use the name Quorum only when some specif feature of the Consensys Quorum implementation is used.

=== The Ethereum transaction execution model (non-BFT)

In general, in Public-Permissionless networks like Bitcoin or Ethereum there are essentially two mechanisms which are used to achieve the Safety property:

1. There is a consensus algorithm that makes sure that all nodes *agree on the same order* of the transactions that are injected into the network.

2. All transactions are *validated and executed* in all participant nodes in a deterministic way.

For Ethereum and its permissioned variants, the transaction lifecycle is similar, from the moment the transactions are injected into the network until they are registered by all the participating nodes and the state is updated in each of them. This is in contrast to other permissioned systems like Fabric or Corda, which use a different transaction execution model.

In Ethereum the generic transaction execution model is the following:

1. **Dissemination phase**: the client applications (in general external to the blockchain) inject transactions using the APIs provided by the different nodes participating in the network (normally via the JSON-RPC mechanism provided by Geth).
+
The transactions are not yet executed in the node where they have been injected, but they are disseminated to all nodes in the network in a “best effort” mode using the P2P (peer-to-peer) transport mechanism. In general, given the size of the network, there is not direct communication among all nodes in the network, so information has to be disseminated using so called “epidemic” protocols. That is, there is not guarantee that at a given moment all the nodes have received the same transactions, but there is a big probability that at a given moment all nodes share a big subset of the total number of transactions that have been injected in the past.
+
At this stage, the transactions disseminated in the network using the P2P protocol are stored in each of the participant nodes in a special queue named “transaction pool”. Please note that in general, each node has received the transactions in different order, due to indirect communications among nodes and heterogeneous propagation delays across the network.

2. **Ordering of transactions and creation of the block**: Ethereum uses a system which we could define as a “__cryptographic lottery__” (PoW), where the winner decides the order of transactions in the next block. Basically, the winner node selects and orders the transactions that it wants from its transaction pool (in general the criteria is to maximize its benefits, given the rewards provided by the system); executes the transactions in the selected order; and includes them in a new block. Via the P2P transport mechanism, the new block is disseminated to the rest of the network.

3. **Validation and execution of the transactions in all nodes and update of the global state**: each node that receives the new block performs some validations and if successful all of the transactions are executed exactly in the order specified in the block. The transactions are executed in a deterministic virtual machine (the EVM), which is what guarantees that the resulting state is the same in all nodes that execute independently the transactions in the same block, given the condition that all nodes start from the same state.

The model described above can in general be called “**Order-Validate-Execute**” (abbreviated OVE), because practically all Ethereum variants have in common that the transactions are Ordered (by the miner in PoW) before the rest of the nodes Validate and Execute them.

Please note that the essential *mission of the miner is ordering* the transactions. The regular nodes (those that do not mine) do not have to trust the miner and so **they validate and execute the transactions themselves**. In addition, all transactions in the block received from the network have to be also in the transaction pool of each node.

=== The transaction execution model with BFT

If the consensus algorithm is a PBFT variant (like IBFT), the overall transaction lifecycle is mostly the same, with two modifications in step 2:

- The node that creates the block (referred normally as the leader) is selected among a set of perfectly identified nodes called Consensus nodes. There may be several strategies for selecting and rotating the leader among the consensus nodes, but he one used in T Network is round-robin where a new leader is chosen for each new block. In this way, all consensus nodes participate eventually in the selection of transactions that go into new blocks, reducing the probability of censorship.

- The leader proposes a block to the other consensus nodes, and those perform voting on the block using a BFT algorithm that reaches agreement even if they do not trust to each other individually.

== Some properties of Ethereum with BFT in presence of malicious actors

We now analyze some properties of a permissioned BFT Ethereum network in the presence of malicious actors. We are especially interested in the behaviour when most consensus nodes are malicious.

PROPERTY 1: The consensus nodes can not include in the block fake transactions or modify existing transactions, even if all consensus nodes are malicious and collude::
In Ethereum (both PoW and BFT), the regular nodes (those that do not mine in PoW, or do not participate in consensus in BFT) do not trust the node or node that generates the block. As described in step 2 of the transaction lifecycle, they check that the transactions listed in the received block exist also in the transaction pool of the node, received during the dissemination phase of the transaction execution. In other words, all transactions listed in the block have had to be created and disseminated in the usual way, so the malicious consensus nodes have to follow the same rules as the rest of the network.

PROPERTY 2: The consensus nodes can not modify transactions and include them in the block, even if all consensus nodes are malicious and collude::
In Ethereum (both PoW and BFT), the transactions are digitally signed by their originator when injected in the network. As per the mechanism before, the transactions really executed are, in any case, the transactions in the transaction pool received in step 1 of the transaction lifecycle.

PROPERTY 3: Transactions can be censored in the long term, but this can be detected and eventually resolved::
When all miners are malicious and collude, they can censor a transaction from being included in any new block. But a regular node can monitor its transaction pool and detect transactions that are never included in any block. Even more powerful, some regular nodes can collaborate by sharing this information and detecting such anomalous behaviour faster and more reliably.
In a Public-Permissioned network like Alastria, the consensus nodes are perfectly identified, and the regular nodes can bring this information to the governance bodies of the association to restore the proper functioning of the network. In extreme cases, they can also take legal actions against the consensus nodes, which can not deny the proofs.

PROPERTY 4: Regular nodes can avoid completely temporary forks and reorgs of the canonical chain::
In Ethereum with PoW, the miner selection is probabilistic, so there may be almost simultaneous winners, each creating its own block and disseminating it to the network. There are temporary forks in the network, which are eventually solved when the “longest chain wins” rule is applied (in reality it is a little more complex than this, but the concept is essentially the same). All nodes that were following the losing chain suffer a reorg in their canonical chain and all transactions included in the losing fork disappear.
+
In Ethereum with BFT, receiving a block with a block number that already exists in the local copy of the canonical chain is a protocol violation (assuming the blocks are different). Even if all consensus nodes are malicious and collude, a honest regular node can easily check the new block and accept it only if the block number is one more than the current latest block in the local canonical chain.
+
This implies that, contrary to what happens with PoW, a blockchain using BFT can implement mechanisms beyond the general consensus algorithm and enforce the “append-only” semantics even in the case where the consensus algorithm does not provide any guarantees about correctness of the blocks generated.
Even more, any honest regular node receiving a block with a block number that already exists in its local copy of the canonical chain should report this event to the governance bodies of the network to take appropriate measures. The block is digitally signed by the public identities of the consensus nodes that produced the seal of the block, so they can not deny the proof, even if it is a single node detecting the protocol violation.

PROPERTY 5: The history of the blockchain can not be rewritten, even if all consensus nodes are malicious and collude::
This follows from the property above. In Ethereum with BFT, a honest regular node will reject any block that already exists in its local copy of the canonical chain.
Please note that this is not 














In the T Network there are basically three types of nodes, depending on their role on the network:

Validator:: The validating nodes execute the consensus algorithm, which in the case of this T Network is the IBFT.

Permissioner:: Are nodes whose physical addresses ("enodes") are perfectly known throughout the network. The network nodes only know the bootnodes that they have in their permitting file. Through a bootnode, the nodes of the network cannot know more nodes.

Regular:: A node that participates by replicating the blockchain, accepting the blocks generated by the validators and executing the transactions included in them. They are also allowed to inject transactions into the Network from sources external to the blockchain.

The https://github.com/alastria/alastria-node